Introducing Ethereum smart contracts for Ruby programmers
Part I Ethereum and the blockchain
Tags: Ethereum, Solidity, Smart Contracts, Ruby Tuesdays

Dave Appleton
Blockchain Developer, HelloGold
calistralabs@gmail.com
https://hellogold.com
@AppletonDave

* Quick Intro / commericial break

.image HG.png

- HelloGold is platform to allow the average Malaysian to buy, store and sell investment grade gold at close to international spot prices as a means of diversifying their savings portfolio.
- Founded by former CFO of World Gold Council
- CTO is former VP of Bangkok Bank 
- Partnering with AEON Credit
- Fully allocated gold vaulted in fully insured vault in Singapore



* Personal philosophy w.r.t. blockchain

EVERY COMPETENT SOFTWARE ARCHITECT

SHOULD INCLUDE 

BLOCKCHAIN 

IN THEIR TOOLKIT

* What I AM going to cover
- What is a blockchain?
- What is special about Ethereum?
- Programming smart contracts
- some tools to help you get started
- talking to contracts from a wallet
- arbitary subjective comments about the state of systems today and where I think they should go

* And then the good bit
- T.C. Wu will explain how you can talk to it with Ruby :-)

Which then will give you a new tool for problem solving

* What is a blockchain
- signed transactions
- Put into signed blocks
- Which are added to a chain
- in a manner such that all the independant nodes that operate the network
- agreed the whole thing to be valid (consensus)i

* Digital Signatures
- I am going to assume that you understand hashing
- hash "Young man, in mathematics you don't understand things. You just get used to them."
- change the comma after "Young man" to a full stop & rehash
- a small change in the content causes a huge change in the result.
.play hashBaby.go  /start main OMIT/,/end main OMIT/

* Proof

- now encrypt the hash value using public key encryption....
* Public Key encryption in 20 seconds
- uses a private key (it's mathematical)
- public key derived from private key (but not vice versa)
- something encrypted by private key can be read with public key
- with public key you can prove that document was encrypted by owner of private key.
- thus the hash, encrypted ensures that the hash, therefore the document is unchanged
- and ensures that the signer is who they say they are.

* Consensus
- design of consensus algorithm ensures that no one node makes all the decisions
- makes it virtually impossible for anybody to modify the past records in the chain

So what are all these transactions doing?

.code demo_code.txt /start REST OMIT/,/end REST OMIT/

We are all used to ACCOUNTING transactions that transfer value.

Enter BITCOIN and 1000 other AltCoins

Mathematics and computer science guarantee ownership and scarcity.

* So what is Ethereum doing differently?
- The nodedes are not just accounting machines
- A transaction does not JUST have to transfer value
- A transaction can *POST* a _contract_ to the chain
- Just like you *could* post a script and have it delivered to a script folder on a server
- Ethereum becomes a distributed computer

* What is a contract?
- is just like a ruby app in that it has
-- instance data
-- methods with parameters and local data
-- constructors

- but it is executed by *every* node to get consensus

* Two ways to interact
- *Transactions*
make changes to the storage (and cost Ether)
can only return results by _events_

- *Calls*		
query the state of the storage or the results of a calculation
get an immediate response
cannot change the state of the storage


